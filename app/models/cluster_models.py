"""
Pydantic models for clustering job and clusters
Ready for MongoDB insertion (with autogenerated IDs)
"""
from bson import ObjectId
from pydantic import BaseModel, Field, field_validator
from typing import List, Dict, Union
from datetime import datetime



class ClusteringJob(BaseModel):
    """Parent class representing a clustering run"""
    id: str = Field(default=None, alias="_id")
    name: str
    total_images: int
    total_clusters: int
    embedding_dimension: int
    timestamp: datetime
    cluster_sizes: Dict[str, float]
    depths: Dict[str, Union[float, Dict]]
    similarities: Dict[str, float]

    @field_validator("id", mode="before")
    def convert_objectid(cls, v):
        if isinstance(v, ObjectId):
            return str(v)
        return v

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class ClusteringJobDTO(BaseModel):
    id: str
    name: str
    total_images: int
    total_clusters: int
    embedding_dimension: int
    timestamp: datetime
    cluster_sizes: Dict[str, float]
    depths: Dict[str, Union[float, Dict]]
    similarities: Dict[str, float]


class Cluster(BaseModel):
    """Individual cluster belonging to a ClusteringJob"""

    job_id: str
    size: int
    depth: int
    similarity: float
    hierarchy_path: str
    images_urls: List[str]
    created_at: datetime = Field(default_factory=datetime.now)


class ClusterDTO(BaseModel):
    job_id: str
    size: int
    depth: int
    similarity: float
    hierarchy_path: str
    images_urls: List[str]
    created_at: datetime


class ProcessRequest(BaseModel):
    cluster_job_name : str
    urls: List[str]

